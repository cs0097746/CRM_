"""
Servi√ßo para descriptografar arquivos de m√≠dia do WhatsApp
Baseado na especifica√ß√£o do WhatsApp Web Protocol
"""
import base64
import hashlib
import hmac
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import logging

logger = logging.getLogger(__name__)

class WhatsAppDecryption:
    """
    Classe para descriptografar arquivos de m√≠dia do WhatsApp
    usando mediaKey e outros par√¢metros de seguran√ßa
    """
    
    @staticmethod
    def decrypt_media(encrypted_data: bytes, media_key: str, media_type: str = 'audio') -> bytes:
        """
        Descriptografa dados de m√≠dia do WhatsApp
        
        Args:
            encrypted_data: Dados criptografados baixados
            media_key: Chave de m√≠dia em base64 do payload
            media_type: Tipo de m√≠dia (audio, image, video, document)
            
        Returns:
            bytes: Dados descriptografados
        """
        try:
            logger.info(f"üîê Iniciando descriptografia {media_type}")
            logger.info(f"üîë MediaKey recebida: {media_key[:20]}...")
            logger.info(f"üì¶ Dados criptografados: {len(encrypted_data)} bytes")
            
            # Decodificar mediaKey de base64
            media_key_bytes = base64.b64decode(media_key)
            logger.info(f"üîë MediaKey decodificada: {len(media_key_bytes)} bytes")
            
            # Expandir a chave usando HKDF (HMAC-based Key Derivation Function)
            expanded_key = WhatsAppDecryption._expand_media_key(media_key_bytes, media_type)
            
            # Extrair IV (16 bytes) e chave AES (32 bytes)
            iv = expanded_key[:16]
            cipher_key = expanded_key[16:48]
            mac_key = expanded_key[48:80]
            
            logger.info(f"üîê IV: {len(iv)} bytes")
            logger.info(f"üîê Cipher key: {len(cipher_key)} bytes") 
            logger.info(f"üîê MAC key: {len(mac_key)} bytes")
            
            # Verificar integridade (MAC est√° nos √∫ltimos 10 bytes)
            if len(encrypted_data) < 10:
                raise ValueError("Arquivo muito pequeno para conter MAC")
                
            encrypted_content = encrypted_data[:-10]
            received_mac = encrypted_data[-10:]
            
            # Calcular MAC esperado
            expected_mac = WhatsAppDecryption._calculate_mac(mac_key, iv + encrypted_content)
            
            if received_mac != expected_mac:
                logger.warning("‚ö†Ô∏è MAC n√£o confere - arquivo pode estar corrompido")
                # Continuar mesmo assim para tentar descriptografar
            
            # Descriptografar usando AES-CBC
            cipher = Cipher(
                algorithms.AES(cipher_key),
                modes.CBC(iv),
                backend=default_backend()
            )
            decryptor = cipher.decryptor()
            
            decrypted_data = decryptor.update(encrypted_content) + decryptor.finalize()
            
            # Remover padding PKCS7
            decrypted_data = WhatsAppDecryption._remove_pkcs7_padding(decrypted_data)
            
            logger.info(f"‚úÖ Descriptografia conclu√≠da: {len(decrypted_data)} bytes")
            
            # Verificar se √© um arquivo OGG v√°lido
            if media_type == 'audio' and decrypted_data.startswith(b'OggS'):
                logger.info("üéµ Arquivo OGG descriptografado v√°lido!")
            
            return decrypted_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro na descriptografia: {e}")
            raise
    
    @staticmethod
    def _expand_media_key(media_key: bytes, media_type: str) -> bytes:
        """
        Expande a mediaKey usando HKDF conforme especifica√ß√£o WhatsApp
        """
        # Info strings para diferentes tipos de m√≠dia
        info_map = {
            'audio': b'WhatsApp Audio Keys',
            'image': b'WhatsApp Image Keys', 
            'video': b'WhatsApp Video Keys',
            'document': b'WhatsApp Document Keys'
        }
        
        info = info_map.get(media_type, b'WhatsApp Audio Keys')
        
        # HKDF Extract
        salt = b'\x00' * 32  # Salt vazio de 32 bytes
        prk = hmac.new(salt, media_key, hashlib.sha256).digest()
        
        # HKDF Expand - gerar 112 bytes (IV + AES key + MAC key + refKey)
        output_length = 112
        t = b''
        okm = b''
        counter = 1
        
        while len(okm) < output_length:
            t = hmac.new(prk, t + info + bytes([counter]), hashlib.sha256).digest()
            okm += t
            counter += 1
            
        return okm[:output_length]
    
    @staticmethod
    def _calculate_mac(mac_key: bytes, data: bytes) -> bytes:
        """
        Calcula MAC usando HMAC-SHA256 e retorna os primeiros 10 bytes
        """
        mac = hmac.new(mac_key, data, hashlib.sha256).digest()
        return mac[:10]
    
    @staticmethod
    def _remove_pkcs7_padding(data: bytes) -> bytes:
        """
        Remove padding PKCS7
        """
        if not data:
            return data
            
        padding_length = data[-1]
        
        # Verificar se o padding √© v√°lido
        if padding_length > 16 or padding_length == 0:
            logger.warning("‚ö†Ô∏è Padding PKCS7 inv√°lido - retornando dados sem remo√ß√£o")
            return data
            
        # Verificar se todos os bytes de padding s√£o iguais
        for i in range(padding_length):
            if data[-(i+1)] != padding_length:
                logger.warning("‚ö†Ô∏è Padding PKCS7 inconsistente - retornando dados sem remo√ß√£o")
                return data
                
        return data[:-padding_length]